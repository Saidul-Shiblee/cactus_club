import axios from 'axios';
import React, { useEffect } from 'react';
import { URL } from '../../ApiFetcher/fetcher';
import { useGlobalContext } from '../../context/context';

const ProbablyFairPolicy = () => {

  
    return (
        <div className=' text-gray-primary'>
            <h2 className='font-bold mt-4 mb-2'>How Does Provably Fair Work at Cactus Club?</h2>
            <div>
            <div className='flex'>
                <p>1. </p><p className=' font-IBM'> <span className=' font-bold'>Cryptographic Seeds:</span>  The foundation of Provably Fair gaming lies in cryptographic seeds. These are randomly generated strings used for securing the game's fairness.</p> 
            </div>
            <div>
                <ul className='pl-8'>
                    <li className=' font-IBM list-disc'><span className=' font-bold'>Last Server Seed SHA256:</span> This is the most recent seed generated by Cactus Club, encrypted with SHA256 for security.</li>
                    <li className=' font-IBM list-disc'><span className=' font-bold'>Last Server Seed:</span>The previous server seed created by us.</li>
                    <li className=' font-IBM list-disc'><span className=' font-bold'>Last Client Seed:</span>The most recent seed generated on your end as a player</li>
                    <li className=' font-IBM list-disc'><span className=' font-bold'>Next Server Seed SHA256:</span>The upcoming server seed, encrypted with SHA256.</li>
                    <li className=' font-IBM list-disc'><span className=' font-bold'>Next Client Seed:</span>Your upcoming client seed.</li>
                    <li className=' font-IBM list-disc'><span className=' font-bold'>SHA512 Hash:</span>A combination of the server and client seeds, encrypted with SHA512 for enhanced security.</li>
                </ul>
            </div>

            <div className='flex'>
                <p>2. </p><p className=' font-IBM'> <span className=' font-bold'>Verifying Fairness:</span>  To ensure the integrity of your last bet, you can use an online SHA512 generator. Merge your Server seed (A) and Client seed (B) with a step indicator (#). This creates a string (A#B), where A and B are your seeds, and # is an increasing number starting at 0. The resulting SHA512 hash confirms the fairness of the sfield.</p> 
            </div>

            <div className='flex'>
                <p>3. </p><p className=' font-IBM font-bold'>Determining Winning Fields in Keno:</p> 
            </div>

            <div>
                <ul className='pl-8'>
                    <li className=' font-IBM list-disc'>Convert the first two characters of your bet hash from Hexadecimal to Decimal.</li>
                    <li className=' font-IBM list-disc'>Use this number to calculate modulo 41. This calculation gives you the number for the first winning field in Keno. Remember, 0 is not valid as fields are numbered from 1 to 40.</li>
                    <li className=' font-IBM list-disc'>Repeat this process to find the coordinates for the remaining winning fields. If you exhaust the hash without finding enough fields, start over and increase your step indicator by one.</li>
                   
                </ul>
            </div>

            <div className='pt-4'>
                <p className=' font-IBM font-bold text-base'>Why Choose Cactus Club's Provably Fair Games?</p>
                <p>
                With Cactus Club's Provably Fair system, you can play with confidence, knowing that every game result is fair, accurate, and transparent. Our technology ensures that neither players nor the house can influence the game outcome, providing a level playing field for all.
                </p>
                <p>
                Experience the future of fair gaming with Cactus Club â€“ where trust and transparency are at the heart of every game!
                </p>
            </div>
            
            </div>
        </div>
    );
};

export default ProbablyFairPolicy;